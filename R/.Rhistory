test_y <- y[test_idx]
# 拟合模型
model <- cv.glmnet(train_x, train_y, alpha = 1)
# 预测
pred_y <- predict(model, newx = test_x, s = "lambda.min")
predictions[test_idx] <- pred_y
actual[test_idx] <- test_y
# 计算这个fold的性能
fold_performance[i] <- cor(pred_y, test_y)^2
}
# 创建评估图
pdf(plot_file, width = 16, height = 12)
par(mfrow = c(2, 3), mar = c(4, 4, 3, 1))
# 图1：预测vs实际值散点图
plot(actual, predictions,
xlab = "Actual Values",
ylab = "Predicted Values",
main = "Prediction vs Actual",
pch = 16, col = adjustcolor("blue", alpha = 0.5))
abline(0, 1, col = "red", lty = 2)
# 图2：预测误差分布
errors <- predictions - actual
hist(errors,
main = "Prediction Error Distribution",
xlab = "Prediction Error",
col = "lightblue",
breaks = 30)
# 图3：各折性能比较
boxplot(fold_performance,
main = "Cross-Validation Performance",
ylab = "R-squared")
points(1, mean(fold_performance), col = "red", pch = 16)
# 图4：残差vs预测值
plot(predictions, errors,
xlab = "Predicted Values",
ylab = "Residuals",
main = "Residuals vs Predicted",
pch = 16, col = adjustcolor("green", alpha = 0.5))
abline(h = 0, col = "red", lty = 2)
# 图5：尝试绘制诺摩图，如果出错则跳过
tryCatch({
require(rms)
final_data <- data.frame(y = y, X_selected)
# 使用 datadist 预处理数据
dd <- datadist(final_data)
options(datadist = "dd")
# 拟合模型并绘制诺摩图
final_model <- lm(y ~ ., data = final_data)
plot(nomogram(final_model,
fun = function(x) x,
funlabel = "Predicted Value"))
}, error = function(e) {
# 如果出错，绘制一个空白图或错误提示
plot(1, type = "n", xlab = "", ylab = "",
main = "Nomogram Generation Failed")
text(1, 1, "Unable to generate nomogram", col = "red")
})
# 图6：Q-Q图检查残差正态性
qqnorm(errors, main = "Residuals Q-Q Plot")
qqline(errors, col = "red")
dev.off()
# 计算总体性能指标
performance <- list(
overall_r2 = cor(predictions, actual)^2,
rmse = sqrt(mean((predictions - actual)^2)),
mae = mean(abs(predictions - actual)),
cv_r2_mean = mean(fold_performance),
cv_r2_sd = sd(fold_performance)
)
# 输出结果
cat("\nModel Validation Results:")
cat("\n-----------------")
cat(sprintf("\nOverall R-squared: %.4f", performance$overall_r2))
cat(sprintf("\nRMSE: %.4f", performance$rmse))
cat(sprintf("\nMAE: %.4f", performance$mae))
cat(sprintf("\nCross-Validation Mean R-squared: %.4f (SD: %.4f)",
performance$cv_r2_mean, performance$cv_r2_sd))
return(list(
selected_items = final_selection,
predictions = predictions,
actual = actual,
performance = performance,
fold_performance = fold_performance
))
}
# 确保已加载必要的包
library(glmnet)
library(caret)
library(rms)
# 运行验证
validation_results <- validate_selection(X, y, final_selection)
str(final_selection)
# 创建诺摩图的专门函数
create_nomogram <- function(X, y, final_selection) {
# 准备数据
final_data <- data.frame(y = y, X[, final_selection, drop = FALSE])
# 使用 datadist 预处理
dd <- datadist(final_data)
options(datadist = "dd")
# 拟合回归模型
tryCatch({
# 尝试创建线性回归模型
model <- lm(y ~ ., data = final_data)
# 创建诺摩图
nom <- nomogram(model,
fun = function(x) x,
funlabel = "Predicted Value")
# 绘制诺摩图
plot(nom,
main = "Predictive Nomogram",
xsize = 0.5,   # 调整大小
ysize = 0.5)
}, error = function(e) {
# 如果线性回归失败，尝试使用 ols
model_ols <- ols(y ~ ., data = final_data)
nom <- nomogram(model_ols,
fun = function(x) x,
funlabel = "Predicted Value")
plot(nom,
main = "Predictive Nomogram",
xsize = 0.5,
ysize = 0.5)
})
}
# 创建诺摩图
pdf("nomogram.pdf", width = 12, height = 10)
create_nomogram(X, y, final_selection)
# 创建诺摩图的专门函数
create_nomogram <- function(X, y, final_selection) {
# 准备数据
final_data <- data.frame(y = y, X[, final_selection, drop = FALSE])
# 尝试创建诺摩图
tryCatch({
# 使用 rms 包的 lrm 或 ols
require(rms)
# 转换所有预测变量为连续型
final_data_transformed <- data.frame(
y = final_data$y,
apply(final_data[, -1], 2, as.numeric)
)
# 创建 datadist 对象
dd <- datadist(final_data_transformed)
options(datadist = "dd")
# 使用 ols 模型
model <- ols(y ~ ., data = final_data_transformed)
# 创建并绘制诺摩图
nom <- nomogram(model,
fun = function(x) x,
funlabel = "Predicted Value")
# 绘制诺摩图
plot(nom,
main = "Predictive Nomogram",
xsize = 0.7,   # 增加大小
ysize = 0.7)
}, error = function(e) {
# 打印错误信息
cat("Error in creating nomogram:\n")
print(e)
})
}
# 创建诺摩图
pdf("nomogram.pdf", width = 16, height = 12)
create_nomogram(X, y, final_selection)
dev.off()
# 创建诺摩图
pdf("nomogram.pdf", width = 12, height = 10)
create_nomogram(X, y, final_selection)
dev.off()
str(X[, final_selection])
# 创建诺摩图的专门函数
create_nomogram <- function(X, y, final_selection) {
# 准备数据
final_data <- as.data.frame(X[, final_selection, drop = FALSE])
final_data$y <- y
# 尝试创建诺摩图
tryCatch({
require(rms)
# 创建 datadist 对象
dd <- datadist(final_data)
options(datadist = "dd")
# 使用 ols 模型
model <- ols(y ~ ., data = final_data)
# 创建并绘制诺摩图
nom <- nomogram(model,
fun = function(x) x,
funlabel = "Predicted Value")
# 绘制诺摩图
plot(nom,
main = "Predictive Nomogram",
xsize = 0.8,   # 增加大小
ysize = 0.8)
}, error = function(e) {
# 打印错误信息
cat("Error in creating nomogram:\n")
print(e)
})
}
# 创建诺摩图
pdf("nomogram.pdf", width = 16, height = 12)
create_nomogram(X, y, final_selection)
dev.off()
# 创建诺摩图的专门函数
create_alternative_nomogram <- function(X, y, final_selection) {
# 准备数据
final_data <- as.data.frame(X[, final_selection, drop = FALSE])
final_data$y <- y
# 尝试多种建模方法
tryCatch({
require(rms)
# 线性回归
model_lm <- lm(y ~ ., data = final_data)
# 绘制替代性图表
pdf("alternative_model_visualization.pdf", width = 16, height = 12)
par(mfrow = c(2, 2))
# 1. 系数图
coef_plot <- plot(summary(model_lm)$coef[, 1],
main = "Coefficient Estimates",
ylab = "Coefficient Value",
pch = 16, col = "blue")
# 2. 预测变量重要性
library(caret)
varImp_plot <- plot(varImp(model_lm),
main = "Variable Importance")
# 3. 部分依赖图（如果可能）
library(pdp)
pdp_plot <- partial(model_lm, pred.var = names(final_data)[-ncol(final_data)],
plot = TRUE,
main = "Partial Dependence")
dev.off()
# 返回模型摘要
return(summary(model_lm))
}, error = function(e) {
cat("Error in creating alternative visualization:\n")
print(e)
})
}
# 运行替代可视化
alternative_results <- create_alternative_nomogram(X, y, final_selection)
install.packages(pdp)
install.packages('pdp')
# 创建诺摩图的专门函数
create_alternative_nomogram <- function(X, y, final_selection) {
# 准备数据
final_data <- as.data.frame(X[, final_selection, drop = FALSE])
final_data$y <- y
# 尝试多种建模方法
tryCatch({
require(rms)
# 线性回归
model_lm <- lm(y ~ ., data = final_data)
# 绘制替代性图表
pdf("alternative_model_visualization.pdf", width = 16, height = 12)
par(mfrow = c(2, 2))
# 1. 系数图
coef_plot <- plot(summary(model_lm)$coef[, 1],
main = "Coefficient Estimates",
ylab = "Coefficient Value",
pch = 16, col = "blue")
# 2. 预测变量重要性
library(caret)
varImp_plot <- plot(varImp(model_lm),
main = "Variable Importance")
# 3. 部分依赖图（如果可能）
library(pdp)
pdp_plot <- partial(model_lm, pred.var = names(final_data)[-ncol(final_data)],
plot = TRUE,
main = "Partial Dependence")
dev.off()
# 返回模型摘要
return(summary(model_lm))
}, error = function(e) {
cat("Error in creating alternative visualization:\n")
print(e)
})
}
# 运行替代可视化
alternative_results <- create_alternative_nomogram(X, y, final_selection)
dev.off
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
# 创建诺摩图的专门函数
create_alternative_nomogram <- function(X, y, final_selection) {
# 准备数据
final_data <- as.data.frame(X[, final_selection, drop = FALSE])
final_data$y <- y
# 尝试多种建模方法
tryCatch({
require(rms)
# 线性回归
model_lm <- lm(y ~ ., data = final_data)
# 绘制替代性图表
pdf("alternative_model_visualization.pdf", width = 16, height = 12)
par(mfrow = c(2, 2))
# 1. 系数图
coef_plot <- plot(summary(model_lm)$coef[, 1],
main = "Coefficient Estimates",
ylab = "Coefficient Value",
pch = 16, col = "blue")
# 2. 预测变量重要性
library(caret)
varImp_plot <- plot(varImp(model_lm),
main = "Variable Importance")
# 3. 部分依赖图（如果可能）
library(pdp)
pdp_plot <- partial(model_lm, pred.var = names(final_data)[-ncol(final_data)],
plot = TRUE,
main = "Partial Dependence")
dev.off()
# 返回模型摘要
return(summary(model_lm))
}, error = function(e) {
cat("Error in creating alternative visualization:\n")
print(e)
})
}
# 运行替代可视化
alternative_results <- create_alternative_nomogram(X, y, final_selection)
# 创建诺摩图的专门函数
create_alternative_nomogram <- function(X, y, final_selection) {
# 准备数据
final_data <- as.data.frame(X[, final_selection, drop = FALSE])
final_data$y <- y
# 尝试多种建模方法
tryCatch({
require(rms)
require(caret)
# 线性回归
model_lm <- lm(y ~ ., data = final_data)
# 绘制替代性图表
pdf("alternative_model_visualization.pdf", width = 16, height = 12)
par(mfrow = c(2, 2))
# 1. 系数图
coef_data <- summary(model_lm)$coef
coef_plot <- barplot(coef_data[, 1],
main = "Coefficient Estimates",
ylab = "Coefficient Value",
col = "blue")
# 2. 预测变量重要性
var_importance <- varImp(model_lm)
plot(var_importance,
main = "Variable Importance")
# 3. 残差图
plot(model_lm, which = 1,
main = "Residuals vs Fitted")
# 4. Q-Q 图
qqnorm(model_lm$residuals,
main = "Q-Q Plot of Residuals")
qqline(model_lm$residuals, col = "red")
dev.off()
# 打印变量重要性
print("Variable Importance:")
print(var_importance)
# 返回模型摘要
return(summary(model_lm))
}, error = function(e) {
cat("Error in creating alternative visualization:\n")
print(e)
})
}
# 运行替代可视化
alternative_results <- create_alternative_nomogram(X, y, final_selection)
# 5. 验证模型 ----
# 使用选中的题项构建预测模型
final_data <- data.frame(
X = X[, final_selection],
y = y
)
# 设置交叉验证
set.seed(123)
cv_folds <- createFolds(y, k = 10)
# 使用随机森林进行验证
train_control <- trainControl(
method = "cv",
index = cv_folds
)
rf_model <- train(
y ~ .,
data = final_data,
method = "rf",
trControl = train_control,
importance = TRUE
)
# 输出结果
print("模型性能:")
print(rf_model$results)
print("变量重要性:")
print(varImp(rf_model))
validate_selection <- function(X, y, final_selection,
plot_file = "model_validation_plots.pdf") {
# 转换 tibble 为 data.frame
X_selected <- as.data.frame(X[, final_selection, drop = FALSE])
# 检查数据
if(nrow(X_selected) != length(y)) {
stop("X and y have different number of observations")
}
# 检查是否有缺失值
if(any(is.na(X_selected)) || any(is.na(y))) {
warning("Data contains missing values, using complete cases")
complete_cases <- complete.cases(X_selected, y)
X_selected <- X_selected[complete_cases, , drop = FALSE]
y <- y[complete_cases]
}
# 设置交叉验证 10 折
set.seed(123)
n_folds <- 10
folds <- createFolds(y, k = n_folds)
# 存储预测结果
predictions <- numeric(length(y))
actual <- numeric(length(y))
fold_performance <- numeric(n_folds)
# 执行交叉验证
for(i in seq_along(folds)) {
# 分割数据
train_idx <- unlist(folds[-i])
test_idx <- folds[[i]]
# 训练模型 - 确保使用矩阵
train_x <- as.matrix(X_selected[train_idx, , drop = FALSE])
train_y <- y[train_idx]
test_x <- as.matrix(X_selected[test_idx, , drop = FALSE])
test_y <- y[test_idx]
# 拟合模型
model <- cv.glmnet(train_x, train_y, alpha = 1)
# 预测
pred_y <- predict(model, newx = test_x, s = "lambda.min")
predictions[test_idx] <- pred_y
actual[test_idx] <- test_y
# 计算这个fold的性能
fold_performance[i] <- cor(pred_y, test_y)^2
}
# 创建评估图
pdf(plot_file, width = 16, height = 12)
par(mfrow = c(2, 3), mar = c(4, 4, 3, 1))
# 图1：预测vs实际值散点图
plot(actual, predictions,
xlab = "Actual Values",
ylab = "Predicted Values",
main = "Prediction vs Actual",
pch = 16, col = adjustcolor("blue", alpha = 0.5))
abline(0, 1, col = "red", lty = 2)
# 图2：预测误差分布
errors <- predictions - actual
hist(errors,
main = "Prediction Error Distribution",
xlab = "Prediction Error",
col = "lightblue",
breaks = 30)
# 图3：各折性能比较
boxplot(fold_performance,
main = "Cross-Validation Performance",
ylab = "R-squared")
points(1, mean(fold_performance), col = "red", pch = 16)
# 图4：残差vs预测值
plot(predictions, errors,
xlab = "Predicted Values",
ylab = "Residuals",
main = "Residuals vs Predicted",
pch = 16, col = adjustcolor("green", alpha = 0.5))
abline(h = 0, col = "red", lty = 2)
# 图5：尝试绘制诺摩图，如果出错则跳过
tryCatch({
require(rms)
final_data <- data.frame(y = y, X_selected)
# 使用 datadist 预处理数据
dd <- datadist(final_data)
options(datadist = "dd")
# 拟合模型并绘制诺摩图
final_model <- lm(y ~ ., data = final_data)
plot(nomogram(final_model,
fun = function(x) x,
funlabel = "Predicted Value"))
}, error = function(e) {
# 如果出错，绘制一个空白图或错误提示
plot(1, type = "n", xlab = "", ylab = "",
main = "Nomogram Generation Failed")
text(1, 1, "Unable to generate nomogram", col = "red")
})
# 图6：Q-Q图检查残差正态性
qqnorm(errors, main = "Residuals Q-Q Plot")
qqline(errors, col = "red")
dev.off()
# 计算总体性能指标
performance <- list(
overall_r2 = cor(predictions, actual)^2,
rmse = sqrt(mean((predictions - actual)^2)),
mae = mean(abs(predictions - actual)),
cv_r2_mean = mean(fold_performance),
cv_r2_sd = sd(fold_performance)
)
# 输出结果
cat("\nModel Validation Results:")
cat("\n-----------------")
cat(sprintf("\nOverall R-squared: %.4f", performance$overall_r2))
cat(sprintf("\nRMSE: %.4f", performance$rmse))
cat(sprintf("\nMAE: %.4f", performance$mae))
cat(sprintf("\nCross-Validation Mean R-squared: %.4f (SD: %.4f)",
performance$cv_r2_mean, performance$cv_r2_sd))
return(list(
selected_items = final_selection,
predictions = predictions,
actual = actual,
performance = performance,
fold_performance = fold_performance
))
}
data <- left_join(dflogi[dflogi$ID %in%dtlogi$ID,],dtlogi,by="ID")
saveRDS(data,"/Users/macbear/SynologyDrive/2aaQuestionnaire/20221114YanchengSuicide/ToChenYekai/20241221data.rds")
setwd("~/Downloads/20241112SuiNetwork")
getwd()
setwd("~/zNet/R")
